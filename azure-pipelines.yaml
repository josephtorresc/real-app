trigger:
- master

variables:
  # Agent VM
  vmImageName: 'ubuntu-latest'

  # Python version
  pythonVersion: '3.8'

  # Project root
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs: 
        versionSpec: '$(pythonVersion)'
        arquitecture: 'x64'

    - task: PythonScript@0
      displayName: 'Export project path'
      inputs:
        scriptSource: 'inline'
        script: |
          """Search all subdirectories for `manage.py`."""
          from glob import iglob
          from os import path
          # Python >=3.8
          manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
          if not manage_py:
              raise SystemExit('Cloud not find a Django project')
          project_location = path.dirname(path.abspath(manage_py))
          print('Found Django project in', project_location)
          print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
      
    - script: |
        python -m pip install --upgrade pip setuptools wheel Django
        pip install -r requirement.txt
        pip install unittest-xml-reporting
        pip freeze
      displayName: 'Install prerequisites'
    
    - script: |
        pushd '$(projectRoot)'
        python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
      condition: succeededOrFailed()
      displayName: 'Run tests'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: "**/TEST-*.xml"
        testRunTitle: 'Python $(PYTHON_VERSION)'

    - task: ArchiveFiles@2
      inputs: 
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
        replaceExistingArchive: True
        verbose: #optional

    - publish: $(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop
